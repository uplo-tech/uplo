package wallet

import (
	"testing"

	"github.com/uplo-tech/uplo/modules"
	"github.com/uplo-tech/uplo/types"
)

// TestIntegrationLoad1of1Uplog loads a 1 of 1 unseeded key generated by uplog
// and then tries to spend the uplofunds contained within. The key is taken from
// the testing keys.
func TestIntegrationLoad1of1Uplog(t *testing.T) {
	if testing.Short() {
		t.SkipNow()
	}
	wt, err := createWalletTester(t.Name(), modules.ProdDependencies)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := wt.closeWt(); err != nil {
			t.Fatal(err)
		}
	}()

	// Load the key into the wallet.
	err = wt.wallet.LoadUplogKeys(wt.walletMasterKey, []string{"../../types/uplog0of1of1.uplokey"})
	if err != nil {
		t.Error(err)
	}

	_, uplofundBal, _, err := wt.wallet.ConfirmedBalance()
	if err != nil {
		t.Fatal(err)
	}
	if !uplofundBal.Equals64(2000) {
		t.Error("expecting a uplofund balance of 2000 from the 1of1 key")
	}

	// Send some uplofunds to the void.
	_, err = wt.wallet.SendUplofunds(types.NewCurrency64(12), types.UnlockHash{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = wt.miner.AddBlock()
	if err != nil {
		t.Fatal(err)
	}
	_, uplofundBal, _, err = wt.wallet.ConfirmedBalance()
	if err != nil {
		t.Fatal(err)
	}
	if !uplofundBal.Equals64(1988) {
		t.Error("expecting balance of 1988 after sending uplofunds to the void")
	}
}

// TestIntegrationLoad2of3Uplog loads a 2 of 3 unseeded key generated by uplog
// and then tries to spend the uplofunds contained within. The key is taken from
// the testing keys.
func TestIntegrationLoad2of3Uplog(t *testing.T) {
	if testing.Short() {
		t.SkipNow()
	}
	wt, err := createWalletTester(t.Name(), modules.ProdDependencies)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := wt.closeWt(); err != nil {
			t.Fatal(err)
		}
	}()

	// Load the key into the wallet.
	err = wt.wallet.LoadUplogKeys(wt.walletMasterKey, []string{"../../types/uplog0of2of3.uplokey", "../../types/uplog1of2of3.uplokey"})
	if err != nil {
		t.Error(err)
	}

	_, uplofundBal, _, err := wt.wallet.ConfirmedBalance()
	if err != nil {
		t.Fatal(err)
	}
	if !uplofundBal.Equals64(7000) {
		t.Error("expecting a uplofund balance of 7000 from the 2of3 key")
	}

	// Send some uplofunds to the void.
	_, err = wt.wallet.SendUplofunds(types.NewCurrency64(12), types.UnlockHash{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = wt.miner.AddBlock()
	if err != nil {
		t.Fatal(err)
	}
	_, uplofundBal, _, err = wt.wallet.ConfirmedBalance()
	if err != nil {
		t.Fatal(err)
	}
	if !uplofundBal.Equals64(6988) {
		t.Error("expecting balance of 6988 after sending uplofunds to the void")
	}
}
